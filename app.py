#1. Imports and Initial Configuration
# Import necessary libraries
from typing import Set
from backend.core import run_llm
import streamlit as st
import logging
from PIL import Image, ImageEnhance
import time
import base64

# Set basic logging configuration
logging.basicConfig(level=logging.INFO)



#2. Helper Functions
# Function to format source URLs into a readable string
def create_sources_string(source_urls: Set[str]) -> str:
    """Creates a sorted, numbered list of source URLs."""
    if not source_urls:
        return ""
    sources_list = sorted(list(source_urls))
    sources_string = "Sources:\n"
    for i, source in enumerate(sources_list):
        sources_string += f"{i+1}. {source}\n"
    return sources_string

# Function to convert image file to base64 string
def img_to_base64(image_path: str) -> str:
    """Encodes an image file to base64 string."""
    with open(image_path, "rb") as img_file:
        return base64.b64encode(img_file.read()).decode()




#3. Streamlit Configuration Class
# Class to configure Streamlit page settings
class PageConfig:
    def __init__(self):
        self.page_title = "Phillip's Work Experience Chatbot"
        self.page_icon = "imgs/01 - Orig_Profile Pic.jpg"
        self.layout = "wide"
        self.initial_sidebar_state = "expanded"
        self.menu_items = {
            "Get help": "https://github.com/Prvargas/work-experience-chatbot",
            "Report a bug": "https://github.com/Prvargas/work-experience-chatbot/issues",
            "About": self.about_text()
        }

    def about_text(self):
        return """
            ## Phillip's Work Experience Chatbot
            
            **LinkedIn**: https://www.linkedin.com/in/prvargasds/
            
            **GitHub**: https://github.com/Prvargas/
            
            **Portfolio**: https://prvargas.github.io/Phillip_Portfolio/
            
            The AI Assistant, Phillip's Work Experience Chatbot, is designed to assist hiring managers and recruiters by providing detailed insights into the professional background and work experience of Phillip Vargas.
            Users can easily access this information through a user-friendly chat interface, which offers comprehensive responses to inquiries about Phillip's career achievements and skills.
            Each answer generated by the chatbot includes a reference link, allowing users to click and verify the response and the related experience directly.
            To learn more about Phillip, visit his LinkedIn profile at [Phillip Vargas](https://www.linkedin.com/in/prvargasds/).
        """

    def set_page_config(self):
        """Applies the page configuration settings."""
        st.set_page_config(
            page_title=self.page_title,
            page_icon=self.page_icon,
            layout=self.layout,
            initial_sidebar_state=self.initial_sidebar_state,
            menu_items=self.menu_items
        )




#4. Image Processing
# Function to load and enhance an image
# Caching the image processing to improve performance
@st.cache(suppress_st_warning=True, allow_output_mutation=True)
def load_and_enhance_image(image_path: str, enhance: bool = False):
    """Loads an image and enhances its contrast if required, using caching to improve loading times."""
    img = Image.open(image_path)
    if enhance:
        enhancer = ImageEnhance.Contrast(img)
        img = enhancer.enhance(1.8)
    return img



#5. Enhanced StreamlitApp Class with Sidebar
# Class to manage Streamlit app functionality
class StreamlitApp:
    def __init__(self):
        self.config = PageConfig()
        self.config.set_page_config()

    def run(self):
        """Runs the Streamlit application."""
        self.display_title()
        self.setup_sidebar()
        self.handle_chat_interface()

    def display_title(self):
        """Displays the title of the application."""
        st.title(self.config.page_title)

    def setup_sidebar(self):
        """Configures the sidebar with profile information and additional controls."""
        # Custom CSS for glowing border effect on images
        st.sidebar.markdown(
            """
            <style>
            .cover-glow {
                width: 100%;
                height: auto;
                padding: 3px;
                box-shadow: 
                    0 0 5px #330000,
                    0 0 10px #660000,
                    0 0 15px #990000,
                    0 0 20px #CC0000,
                    0 0 25px #FF0000,
                    0 0 30px #FF3333,
                    0 0 35px #FF6666;
                position: relative;
                z-index: -1;
                border-radius: 30px;  /* Rounded corners */
            }
            </style>
            """,
            unsafe_allow_html=True
        )
        
        # Load and display the profile picture with glowing effect
        img_path = "imgs/01 - Orig_Profile Pic.jpg"
        img_base64 = img_to_base64(img_path)
        st.sidebar.markdown(
            f'<img src="data:image/png;base64,{img_base64}" class="cover-glow">',
            unsafe_allow_html=True
        )
        
        # Additional sidebar content
        st.sidebar.markdown("---")
        st.sidebar.markdown(
            """
            ## Phillip's Work Experience Chatbot
            
            **LinkedIn**: [Prvargasds](https://www.linkedin.com/in/prvargasds/)
            
            **GitHub**: [Prvargas](https://github.com/Prvargas/)
            
            **Portfolio**: [Phillip Portfolio](https://prvargas.github.io/Phillip_Portfolio/)
            
            The AI Assistant, Phillip's Work Experience Chatbot, is designed to assist hiring managers and recruiters by providing detailed insights into the professional background and work experience of Phillip Vargas. 
            Users can easily access this information through a user-friendly chat interface, which offers comprehensive responses to inquiries about Phillip's career achievements and skills. 
            Each answer generated by the chatbot includes a reference link, allowing users to click and verify the response and the related experience directly. 
            To learn more about Phillip, visit his LinkedIn profile at [Phillip Vargas](https://www.linkedin.com/in/prvargasds/).
            """,
            unsafe_allow_html=True
        )
        st.sidebar.markdown("---")
        
        # Toggle checkbox in the sidebar for basic interactions
        show_basic_info = st.sidebar.toggle("Show Frequently Asked Interview Questions", value=True)
        if show_basic_info:
            st.sidebar.markdown("""
            ### Frequently Asked Interview Questions
            - **Could you tell me about yourself and describe your background in brief?**: I've addressed this question in advance to showcase my personality, relevant work experience, and to help interviewers evaluate how well I align with the companyâ€™s values and work environment.\n
            - **Can you describe a project you completed that makes you particularly proud?**: Before ChatGPT gained popularity in 2023, I already had a strong interest in NLP. In 2022, I completed my master's thesis by employing Transformer models to analyze rap lyrics and infer artist characteristics based solely on the text. Feel free to ask if you'd like to know more about my work.\n
            - **What are some of your hobbies and passions?**: Since I'm a methodical tech enthusiast, my answer might surprise people.
            """)

    def handle_chat_interface(self):
        """Manages the chat interface and session state."""
        if 'chat_answers_history' not in st.session_state:
            st.session_state['chat_answers_history'] = []
        if 'user_prompt_history' not in st.session_state:
            st.session_state['user_prompt_history'] = []
        if 'chat_history' not in st.session_state:
            st.session_state['chat_history'] = []

        chatbot_input = st.chat_input("Ask me about Phillip's professional background and work experience:")
        if chatbot_input:
            with st.spinner("Generating response..."):
                generated_response = run_llm(chatbot_input)
                sources = set(doc.metadata.get("source", "Unknown source") for doc in generated_response["source_documents"])
                formatted_response = f"{generated_response['answer']} \n\n {create_sources_string(sources)}"
                st.session_state.chat_history.append((chatbot_input, generated_response["answer"]))
                st.session_state.user_prompt_history.append(chatbot_input)
                st.session_state.chat_answers_history.append(formatted_response)


        if 'chat_answers_history' in st.session_state and st.session_state["chat_answers_history"]:
            for user_query, generated_response in zip(st.session_state["user_prompt_history"], st.session_state["chat_answers_history"]):
                st.chat_message("User", avatar="imgs/stuser.png").markdown(f"**User:** {user_query}", unsafe_allow_html=True)
                st.chat_message("Assistant", avatar="imgs/avatar_streamly.png").markdown(f"**Assistant:** {generated_response}", unsafe_allow_html=True)


#6. Main Execution
if __name__ == "__main__":
    app = StreamlitApp()
    app.run()






